from snakemake.utils import min_version
from pandas import read_csv
from os.path import join, isfile

__author__ = "Graeme Ford"
__credits__ = [
    "Graeme Ford",
    "Prof. Michael S. Pepper",
    "Prof. Fourie Joubert",
    "Antionette Colic",
    "Fatima Barmania",
    "Sarah Turner",
    "Megan Holborn",
]
__version__ = "1.0.0"
__maintainer__ = "Graeme Ford"
__email__ = "graeme.ford@tuks.co.za"
__status__ = "Development"

# ENFORCE SNAKEMAKE VERSION CHECK:
min_version("7")


# DEFINE CONFIG FILE FOR SNAKEMAKE:
configfile: join("config", "config.json")


# IMPORT DATASET METADATA:
datasets = read_csv(join("input", "datasets.csv"), header=0)


# IMPORT COMMON FUNCTIONS:
include: "rules/common.py"

# SET GLOBAL DOCKER RECIPIE TO USE:
container: "docker://graemeford/pipeline-os"

rule all:
    """
    Catch-all rule to trigger auto-run of all processes. This process will be fired automatically in absence of explicit process name given by cli-argument.
    """
    default_target: True
    log:
        "logs/ALL/ALL.log",
    input:
        expand("results/PREP/{dataset}/bcftools_annotate.vcf.gz", dataset=list(datasets["dataset_name"])
        ),
        expand(
            "results/LIFTOVER/{dataset}.vcf.gz", dataset=list(datasets["dataset_name"])
        ),

# group: VALIDATE
rule strip_INFO_tags:
    """
    Strip out INFO tags
    """
    group: "VALIDATE"
    input:
        lambda wildcards: datasets.loc[
            datasets["dataset_name"] == wildcards.dataset, "file"
        ].item(),
    output:
        pipe("results/PREP/{dataset}/strip_INFO_tags.vcf.gz")
    benchmark:
        "results/_benchmarks/VALIDATE/strip_INFO_tags/{dataset}.benchmark"
    resources:
        cpus=search("cores", "VALIDATE"),
        nodes=search("nodes", "VALIDATE"),
        queue=search("queue", "VALIDATE"),
        walltime=search("walltime", "VALIDATE")
    envmodules:
        config["environment"]["envmodules"]["bcftools"],
    shell:
        """
        echo -e "\n--- LOG SECTION START | BcfTools 'annotate' ---" 1>&2
        bcftools annotate -x INFO,FORMAT -O z -o {output} {input}
        echo -e "--- LOG SECTION END | BcfTools 'annotate' ---\n" 1>&2
        """

# group: VALIDATE
# TODO: Identify Replacement for Piccards `FixVcfHeader`.
# rule FixVcfHeader:
#     """
#     Validate the VCF header and specification has been followed
#     """
#     group: "VALIDATE"
#     input:
#         "results/PREP/{dataset}/strip_INFO_tags.vcf.gz"
#     output:
#         "results/PREP/{dataset}/FixVcfHeader.vcf.gz"
#     benchmark:
#         "results/_benchmarks/VALIDATE/FixVcfHeader/{dataset}.tsv"
#     resources:
#         cpus=search("cores", "VALIDATE"),
#         nodes=search("nodes", "VALIDATE"),
#         queue=search("queue", "VALIDATE"),
#         walltime=search("walltime", "VALIDATE")
#     envmodules:
#         config["environment"]["envmodules"]["piccard"],
#     params:
#         memory=search("memory", "VALIDATE")
#     shell:
#         """
#         echo -e "--- LOG SECTION START | GATK 'FixVcfHeader' ---" 1>&2
#         picard-tools -Xmx{params.memory} FixVcfHeader I={input} O={output}
#         echo -e "--- LOG SECTION END | GATK 'FixVcfHeader' ---\n" 1>&2
#         """

# group: VALIDATE
rule filter:
    """
    Remove variant types we cant yet analyse
    """
    group: "VALIDATE"
    input:
        "results/PREP/{dataset}/strip_INFO_tags.vcf.gz"
    output:
        pipe("results/PREP/{dataset}/bcftools_filter.vcf.gz")
    log:
        "results/PREP/{dataset}/bcftools_filter.log"
    benchmark:
        "results/_benchmarks/VALIDATE/bcftools_filter/{dataset}.benchmark"
    resources:
        cpus=search("cores", "VALIDATE"),
        nodes=search("nodes", "VALIDATE"),
        queue=search("queue", "VALIDATE"),
        walltime=search("walltime", "VALIDATE")
    envmodules:
        config["environment"]["envmodules"]["bcftools"],
    params:
        memory=search("memory", "VALIDATE")
    shell:
        """
        bcftools view -v snps,indels -f PASS -O z -o results/PREP/{wildcards.dataset}/CLEANED.vcf.gz results/PREP/{wildcards.dataset}/NEW_INFO.vcf.gz 2>{log}
        """

# group: VALIDATE
# conditional: true
if isfile(join("input", "samples.csv")):
    rule subset:
        """
        Subset samples according to user defined list and remove variants that do not pass QC.
        """
        group: "VALIDATE"
        input:
            vcf="results/PREP/{dataset}/bcftools_filter.vcf.gz",
            samples="input/samples.csv"
        output:
            pipe("results/PREP/{dataset}/bcftools_subset.vcf.gz")
        log:
            "results/PREP/{dataset}/bcftools_subset.log"
        benchmark:
            "results/_benchmarks/VALIDATE/bcftools_subset/{dataset}.benchmark"
        resources:
            cpus=search("cores", "VALIDATE"),
            nodes=search("nodes", "VALIDATE"),
            queue=search("queue", "VALIDATE"),
            walltime=search("walltime", "VALIDATE")
        envmodules:
            config["environment"]["envmodules"]["bcftools"],
        params:
            samples=lambda wildcards, input: ",".join(read_csv(join("input", "samples.csv"), header=0).query("dataset == 'GnomAD'")["sample_name"].tolist())
        shell:
            """
            bcftools view -s {{ params.samples }} -O z -o results/PREP/{wildcards.dataset}/FILTERED.vcf.gz {input.vcf} 2>{log}
            """
 
# group: VALIDATE
rule normalize:
    """
    Normalise variants - split multiallelic records, left align variants, and ensure variant parsimony
    """
    group: "VALIDATE"
    input:
        lambda wildcards: "results/PREP/{dataset}/bcftools_subset.vcf.gz" if isfile("input/samples.csv") else "results/PREP/{dataset}/bcftools_filter.vcf.gz"
    output:
        pipe("results/PREP/{dataset}/bcftools_normalize.vcf.gz")
    log:
        "results/PREP/{dataset}/bcftools_normalize.log"
    benchmark:
        "results/_benchmarks/VALIDATE/bcftools_normalize/{dataset}.benchmark"
    resources:
        cpus=search("cores", "VALIDATE"),
        nodes=search("nodes", "VALIDATE"),
        queue=search("queue", "VALIDATE"),
        walltime=search("walltime", "VALIDATE")
    envmodules:
        config["environment"]["envmodules"]["bcftools"],
    shell:
        """
        bcftools norm -m -any results/PREP/{wildcards.dataset}/FILTERED.vcf.gz -O z -o results/PREP/{wildcards.dataset}/NORMALISED.vcf.gz 2>{log}
        """

# group: VALIDATE
rule annotate:
    """
    Ensure consistency of chromosome nomenclature for each dataset and sort by chromosome
    """
    group: "VALIDATE"
    input:
        "results/PREP/{dataset}/bcftools_normalize.vcf.gz"
    output:
        "results/PREP/{dataset}/bcftools_annotate.vcf.gz"
    log:
        "results/PREP/{dataset}/bcftools_annotate.log"
    benchmark:
        "results/_benchmarks/VALIDATE/bcftools_annotate/{dataset}.benchmark"
    resources:
        cpus=search("cores", "VALIDATE"),
        nodes=search("nodes", "VALIDATE"),
        queue=search("queue", "VALIDATE"),
        walltime=search("walltime", "VALIDATE")
    envmodules:
        config["environment"]["envmodules"]["bcftools"],
    params:
        memory=search("memory", "VALIDATE")
    shell:
        """
        bcftools annotate --rename-chrs input/rename_chr.txt results/PREP/{wildcards.dataset}/NORMALISED.vcf.gz | bcftools sort -m {params.memory} -T results/PREP/{wildcards.dataset} -O z -o results/PREP/{wildcards.dataset}.vcf.gz 2>{log}
        """

# group: VALIDATE
rule tabix:
    """
    Generate tabix-index.
    """
    group: "VALIDATE"
    input:
        "results/{operation}/{dataset}/{output}.vcf.gz"
    output:
        "results/{operation}/{dataset}/{output}.vcf.gz.tbi"
    log:
        "results/{operation}/{dataset}/{output}.log"
    benchmark:
        "results/_benchmarks/{operation}/{dataset}/{output}.benchmark"
    resources:
        cpus=search("cores", "VALIDATE"),
        nodes=search("nodes", "VALIDATE"),
        queue=search("queue", "VALIDATE"),
        walltime=search("walltime", "VALIDATE")
    envmodules:
        config["environment"]["envmodules"]["bcftools"],
    shell:
        """
        cd results/{operation}/{dataset}/
        tabix -p vcf {input}
        """


rule LIFTOVER:
    """
    Lift Variants onto same Reference build. Otherwise we cant merge them or analyse them in context of each other.
    """
    group: "LIFTOVER"
    input:
        "results/PREP/{dataset}/bcftools_annotate.vcf.gz",
        "results/PREP/{dataset}/bcftools_annotate.vcf.gz.tbi",
    output:
        "results/LIFTOVER/{dataset}.vcf.gz",
    log:
        "logs/LIFTOVER/{dataset}.log",
    benchmark:
        "results/_benchmarks/LIFTOVER/{dataset}.log"
    resources:
        cpus=search("cores", "LIFTOVER"),
        nodes=search("nodes", "LIFTOVER"),
        queue=search("queue", "LIFTOVER"),
        walltime=search("walltime", "LIFTOVER"),
    params:
        prefix=lambda wildcards: "results/LIFTOVER/{dataset}_LIFTED".format(
            dataset=wildcards.dataset
        ),
        exclusionList=(
            lambda wildcards: "results/LIFTOVER/{dataset}_EXCLUDE.dat".format(
                dataset=wildcards.dataset
            )
        ),
        chainFile=join("resources", "hg19ToHg38.over.chain"),
        LiftOver=join("resources", "liftOverPlink.py"),
        rmBadLifts=join("resources", "rmBadLifts.py"),
        ref=join(
            *next(
                i["file_path"]
                for i in config["reference-genomes"]
                if i["version"] == "GRCh38"
            ),
        ),
        mem=f'-Xmx{search("memory", "LIFTOVER")} ',
    script:
        join("scripts", "00-LIFTOVER.py")
