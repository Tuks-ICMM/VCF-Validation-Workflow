from snakemake.utils import min_version
from pandas import read_csv
from os.path import join

__author__ = "Graeme Ford"
__credits__ = [
    "Graeme Ford",
    "Prof. Michael S. Pepper",
    "Prof. Fourie Joubert",
    "Antionette Colic",
    "Fatima Barmania",
    "Sarah Turner",
    "Megan Holborn",
]
__version__ = "1.0.0"
__maintainer__ = "Graeme Ford"
__email__ = "graeme.ford@tuks.co.za"
__status__ = "Development"

# ENFORCE SNAKEMAKE VERSION CHECK:
min_version("6.0")


# DEFINE CONFIG FILE FOR SNAKEMAKE:
configfile: join("config", "config.json")


# IMPORT DATASET METADATA:
datasets = read_csv(join("input", "datasets.csv"), header=0)


# IMPORT COMMON FUNCTIONS:
include: "rules/common.py"

# SET GLOBAL DOCKER RECIPIE TO USE:
container: "docker://graemeford/pipeline-os"

rule all:
    """
    Catch-all rule to trigger auto-run of all processes. This process will be fired automatically in absence of explicit process name given by cli-argument.
    """
    default_target: True
    log:
        "logs/ALL/ALL.log",
    input:
        expand("results/PREP/{dataset}.vcf.gz", dataset=list(datasets["dataset_name"])),
        expand(
            "results/LIFTOVER/{dataset}.vcf.gz", dataset=list(datasets["dataset_name"])
        ),


rule VALIDATE:
    """
    Perform normalisation of variants, validation of VCF format as well as REF alleles and strip out INFO tags.
    """
    log:
        "results/PREP/{sample}.log",
    input:
        lambda wildcards: datasets.loc[
            datasets["dataset_name"] == wildcards.sample, "file"
        ].item(),
    output:
        "results/PREP/{sample}/NO_INFO.vcf.gz",
        "results/PREP/{sample}/NEW_INFO.vcf.gz",
        "results/PREP/{sample}/FILTERED.vcf.gz",
        "results/PREP/{sample}/NORMALISED.vcf.gz",
        "results/PREP/{sample}.vcf.gz",
        "results/PREP/{sample}.vcf.gz.tbi",
    params:
        memory=search("memory", "VALIDATE"),
    resources:
        cpus=search("cores", "VALIDATE"),
        nodes=search("nodes", "VALIDATE"),
        queue=search("queue", "VALIDATE"),
        walltime=search("walltime", "VALIDATE"),
    envmodules:
        "bcftools-1.7",
        "picard-2.17.11",
        "gatk-4.2.2.0",
        "samtools-1.7"
    shell:
        """
        # Strip out INFO tags:
        echo -e "\n--- LOG SECTION START | BcfTools 'annotate' ---" 1>&2
        bcftools annotate -x INFO,FORMAT -O z -o results/PREP/{wildcards.sample}/NO_INFO.vcf.gz {input}
        echo -e "--- LOG SECTION END | BcfTools 'annotate' ---\n" 1>&2

        # Regenerate and verify the VCF header:
        echo -e "--- LOG SECTION START | GATK 'FixVcfHeader' ---" 1>&2
        java -Xmx{params.memory} -jar $PICARD FixVcfHeader I=results/PREP/{wildcards.sample}/NO_INFO.vcf.gz O=results/PREP/{wildcards.sample}/NEW_INFO.vcf.gz
        echo -e "--- LOG SECTION END | GATK 'FixVcfHeader' ---\n" 1>&2

        # Remove variant types we cant yet analyse:
        echo -e "--- LOG SECTION START | GATK 'SelectVariants' ---" 1>&2
        gatk SelectVariants -V results/PREP/{wildcards.sample}/NEW_INFO.vcf.gz --select-type-to-include SNP --select-type-to-include INDEL --select-type-to-exclude MIXED --select-type-to-exclude MNP --select-type-to-exclude SYMBOLIC --exclude-filtered -O results/PREP/{wildcards.sample}/CLEANED.vcf.gz
        echo -e "--- LOG SECTION END | GATK 'FixVcfHeader' ---\n" 1>&2
        
        # Subset samples according to user defined list and remove variants that do not pass QC:
        echo -e "--- LOG SECTION START | BcfTools 'view' ---" 1>&2
        bcftools view -S input/{wildcards.sample}_samples_subset.txt -f 'PASS' -O z -o results/PREP/{wildcards.sample}/FILTERED.vcf.gz results/PREP/{wildcards.sample}/CLEANED.vcf.gz
        echo -e "--- LOG SECTION END | BcfTools 'view' ---\n" 1>&2
        
        # Normalise variants - split multiallelic records, left align variants, and ensure variant parsimony
        echo -e "--- LOG SECTION START | BcfTools 'norm' ---" 1>&2
        bcftools norm -m -any results/PREP/{wildcards.sample}/FILTERED.vcf.gz -O z -o results/PREP/{wildcards.sample}/NORMALISED.vcf.gz
        echo -e "--- LOG SECTION END | BcfTools 'norm' ---\n" 1>&2

        # Ensure consistency of chromosome nomenclature for each dataset and sort by chromosome
        echo -e "--- LOG SECTION START | BcfTools 'annotate' ---" 1>&2
        bcftools annotate --rename-chrs input/rename_chr.txt results/PREP/{wildcards.sample}/NORMALISED.vcf.gz | bcftools sort -m {params.memory} -T results/PREP/{wildcards.sample} -O z -o results/PREP/{wildcards.sample}.vcf.gz
        echo -e "--- LOG SECTION END | BcfTools 'annotate' --- \n" 1>&2

        echo -e "--- LOG SECTION START | SamTools 'tabix' ---" 1>&2
        tabix -p vcf results/PREP/{wildcards.sample}.vcf.gz
        echo -e "--- LOG SECTION END | SamTools 'tabix' --- \n" 1>&2
        """


rule LIFTOVER:
    """
    Lift Variants onto same Reference build. Otherwise we cant merge them or analyse them in context of each other.
    """
    log:
        "logs/LIFTOVER/{sample}.log",
    input:
        "results/PREP/{sample}.vcf.gz",
        "results/PREP/{sample}.vcf.gz.tbi",
    output:
        "results/LIFTOVER/{sample}.vcf.gz",
    params:
        prefix=lambda wildcards: "results/LIFTOVER/{sample}_LIFTED".format(
            sample=wildcards.sample
        ),
        exclusionList=(
            lambda wildcards: "results/LIFTOVER/{sample}_EXCLUDE.dat".format(
                sample=wildcards.sample
            )
        ),
        chainFile=join("resources", "hg19ToHg38.over.chain"),
        LiftOver=join("resources", "liftOverPlink.py"),
        rmBadLifts=join("resources", "rmBadLifts.py"),
        ref=join(
            *next(
                i["file_path"]
                for i in config["reference-genomes"]
                if i["version"] == "GRCh38"
            ),
        ),
        mem=f'-Xmx{search("memory", "LIFTOVER")} ',
    resources:
        cpus=search("cores", "LIFTOVER"),
        nodes=search("nodes", "LIFTOVER"),
        queue=search("queue", "LIFTOVER"),
        walltime=search("walltime", "LIFTOVER"),
    script:
        join("scripts", "00-LIFTOVER.py")
